"use strict";(()=>{var a={};a.id=354,a.ids=[354],a.modules={1333:a=>{a.exports=import("@trpc/server")},1345:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.d(b,{w:()=>i});var e=c(2971),f=c(6981),g=c(1333),h=a([e,f,g]);[e,f,g]=h.then?(await h)():h;let i=(0,f.QB)({create:f.JI.input(e.z.object({conversationId:e.z.string().min(1,"Conversation ID is required"),role:e.z.enum(["user","assistant"]),content:e.z.string().min(1,"Message content cannot be empty").max(1e4,"Message content too long (max 10,000 characters)"),tokens:e.z.number().min(0,"Token count must be non-negative")})).mutation(async({ctx:a,input:b})=>{try{if(!await a.db.conversation.findUnique({where:{id:b.conversationId}}))throw new g.TRPCError({code:"NOT_FOUND",message:"Conversation not found"});return await a.db.message.create({data:b})}catch(a){if(a instanceof g.TRPCError)throw a;throw console.error("Error creating message:",a),new g.TRPCError({code:"INTERNAL_SERVER_ERROR",message:"Failed to create message",cause:a})}}),getByConversation:f.JI.input(e.z.object({conversationId:e.z.string().min(1,"Conversation ID is required")})).query(async({ctx:a,input:b})=>{try{if(!await a.db.conversation.findUnique({where:{id:b.conversationId}}))throw new g.TRPCError({code:"NOT_FOUND",message:"Conversation not found"});return await a.db.message.findMany({where:{conversationId:b.conversationId},orderBy:{createdAt:"asc"}})}catch(a){if(a instanceof g.TRPCError)throw a;throw console.error("Error fetching messages:",a),new g.TRPCError({code:"INTERNAL_SERVER_ERROR",message:"Failed to fetch messages",cause:a})}}),update:f.JI.input(e.z.object({id:e.z.string().min(1,"Message ID is required"),content:e.z.string().min(1,"Message content cannot be empty").max(1e4,"Message content too long (max 10,000 characters)")})).mutation(async({ctx:a,input:b})=>{try{if(!await a.db.message.findUnique({where:{id:b.id}}))throw new g.TRPCError({code:"NOT_FOUND",message:"Message not found"});return await a.db.message.update({where:{id:b.id},data:{content:b.content}})}catch(a){if(a instanceof g.TRPCError)throw a;throw console.error("Error updating message:",a),new g.TRPCError({code:"INTERNAL_SERVER_ERROR",message:"Failed to update message",cause:a})}}),delete:f.JI.input(e.z.string().min(1,"Message ID is required")).mutation(async({ctx:a,input:b})=>{try{if(!await a.db.message.findUnique({where:{id:b}}))throw new g.TRPCError({code:"NOT_FOUND",message:"Message not found"});return await a.db.message.delete({where:{id:b}}),{success:!0}}catch(a){if(a instanceof g.TRPCError)throw a;throw console.error("Error deleting message:",a),new g.TRPCError({code:"INTERNAL_SERVER_ERROR",message:"Failed to delete message",cause:a})}})});d()}catch(a){d(a)}})},1354:(a,b,c)=>{c.d(b,{B:()=>g});var d=c(3990);let e={FORCE_MOCK_ASSISTANT:"true"===process.env.DEMO_MODE,DEMO_RATE_LIMITS:{CHAT:{maxRequests:100,windowMs:6e4},API:{maxRequests:300,windowMs:6e4},EXPORT:{maxRequests:20,windowMs:6e4}},SAMPLE_CONVERSATIONS:[{id:"demo-1",title:"Welcome to the Chat App Demo!",messages:[{role:"user",content:"Hello! Can you tell me what this chat application can do?",timestamp:new Date(Date.now()-36e5)},{role:"assistant",content:`Welcome to this AI chat application! ðŸŽ‰ This is a showcase demo featuring:

â€¢ **Real-time AI conversations** - Chat with various AI models
â€¢ **Conversation management** - Create, organize, and delete chats  
â€¢ **Export functionality** - Download your conversations as Markdown or JSON
â€¢ **Beautiful UI** - Modern, responsive design with Tailwind CSS
â€¢ **Session persistence** - Your conversations are saved locally
â€¢ **Cost tracking** - Monitor API usage and costs

This demo uses a mock AI assistant to showcase the interface and functionality. In the full version, you can connect your own OpenRouter API key to chat with real AI models like Claude, GPT-4, and more!

Try asking me anything or explore the export feature! ðŸš€`,timestamp:new Date(Date.now()-3599e3)}]},{id:"demo-2",title:"Technical Features Demo",messages:[{role:"user",content:"What technical features does this app have?",timestamp:new Date(Date.now()-18e5)},{role:"assistant",content:`This chat application is built with modern web technologies:

**Frontend:**
â€¢ Next.js 15 with React 18
â€¢ TypeScript for type safety
â€¢ Tailwind CSS for styling
â€¢ tRPC for type-safe APIs

**Backend:**
â€¢ Node.js server with tRPC
â€¢ Prisma ORM with SQLite database
â€¢ Rate limiting and security middleware
â€¢ Structured logging system

**Production Features:**
â€¢ Database transactions for data integrity
â€¢ Input validation and sanitization
â€¢ Session-based access control
â€¢ Health check endpoints
â€¢ Graceful error handling

**Deployment:**
â€¢ Vercel-ready configuration
â€¢ Docker support
â€¢ Environment-based configuration
â€¢ Production monitoring

The architecture is designed to be scalable, secure, and maintainable! ðŸ’ª`,timestamp:new Date(Date.now()-1799e3)}]}],IS_DEMO:"preview"===process.env.VERCEL_ENV||"true"===process.env.DEMO_MODE};class f{constructor(a){this.modelUsage=new Map,this.apiKey=a.apiKey,this.siteName=a.siteName}async getResponse(a,b=[]){try{if(!a||""===a.trim())throw Error("User message cannot be empty");let c=this.buildMessagesArray(a,b),d=this.selectModel(),e=await this.fetchResponse(c,d);if(!e||""===e.trim())throw Error("Assistant response is empty");let f=this.estimateCost(e,d);return this.recordModelUsage(d),{response:e,model:d,cost:f}}catch(a){return console.error("Error in OpenRouterAssistant.getResponse:",a),{response:"Sorry, I encountered an error. Please try again.",model:"error",cost:0}}}getModelUsageStats(){try{let a=Array.from(this.modelUsage.values()).reduce((a,b)=>a+b,0);if(0===a)return[];return Array.from(this.modelUsage.entries()).map(([b,c])=>({model:b,count:c,percentage:c/a*100}))}catch(a){return console.error("Error getting model usage stats:",a),[]}}buildMessagesArray(a,b){try{return[...b.map(a=>({role:a.role,content:a.content})),{role:"user",content:a}]}catch(b){return console.error("Error building messages array:",b),[{role:"user",content:a}]}}selectModel(){try{let a=["deepseek-chat","anthropic/claude-3-haiku"],b=Math.floor(Math.random()*a.length);return a[b]}catch(a){return console.error("Error selecting model:",a),"deepseek-chat"}}async fetchResponse(a,b){try{let c=new AbortController,d=setTimeout(()=>c.abort(),6e4);try{let e=await fetch("https://openrouter.ai/api/v1/chat/completions",{method:"POST",headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json","HTTP-Referer":this.getDefaultSiteName(),"X-Title":this.siteName},body:JSON.stringify({model:b,messages:a,temperature:.7,max_tokens:1e3}),signal:c.signal});if(clearTimeout(d),!e.ok)throw console.error(`OpenRouter API error: ${e.status}`),Error(`OpenRouter API error: ${e.status}`);let f=await e.json();if(!f.choices||!Array.isArray(f.choices)||0===f.choices.length)throw Error("Invalid response format from OpenRouter API");return f.choices[0].message.content}catch(a){if(clearTimeout(d),a instanceof Error&&"AbortError"===a.name)throw Error("Request timeout: The AI response took too long. Please try again.");throw a}}catch(c){let a=Date.now()-startTime;throw d.vF.assistantRequest(b,0,0,a,c instanceof Error?c:Error(String(c))),c}}estimateCost(a,b){try{return Math.ceil(a.length/4)*(({"deepseek-chat":1e-7,"anthropic/claude-3-haiku":25e-8,"anthropic/claude-3-sonnet":3e-6,"anthropic/claude-3-opus":15e-6})[b]||1e-6)}catch(a){return console.error("Error estimating cost:",a),0}}recordModelUsage(a){try{let b=this.modelUsage.get(a)||0;this.modelUsage.set(a,b+1)}catch(a){console.error("Error recording model usage:",a)}}getDefaultSiteName(){try{return"localhost"}catch(a){return console.error("Error getting default site name:",a),"localhost"}}}function g(a){try{if(e.FORCE_MOCK_ASSISTANT||e.IS_DEMO)return d.vF.info("Using mock assistant for demo mode"),new h;if(a.apiKey){if(!a.apiKey.startsWith("sk-or-v1-"))return console.error("Invalid API key format provided"),new h;return new f({apiKey:a.apiKey,siteName:a.siteName||"chat-app"})}let b=process.env.OPENROUTER_API_KEY;if(!b)return new h;if(!b.startsWith("sk-or-v1-"))return console.error("Invalid API key format in environment variable"),new h;return new f({apiKey:b,siteName:a.siteName||"chat-app"})}catch(a){return console.error("Error creating assistant service"),new h}}class h{getSmartMockResponse(a){let b=a.toLowerCase();if(b.includes("demo")||b.includes("showcase"))return`ðŸŽ‰ Welcome to the chat app demo! This is a fully functional chat interface with mock AI responses. 

Key features you can try:
â€¢ Send messages and get intelligent responses
â€¢ Create and manage multiple conversations  
â€¢ Export your chats to Markdown or JSON
â€¢ Experience the beautiful, responsive UI

This demo uses a smart mock assistant that provides contextual responses. In the full version, you'd connect your OpenRouter API key to chat with real AI models like Claude, GPT-4, and more!`;if(b.includes("export")||b.includes("download"))return`ðŸ“„ The export feature lets you download your conversations in multiple formats:

â€¢ **Markdown**: Perfect for documentation or sharing
â€¢ **JSON**: Great for data analysis or backup
â€¢ **Obsidian**: Compatible with Obsidian note-taking

Try clicking the export button to see it in action! Your conversations will be formatted beautifully with timestamps, metadata, and proper structure.`;if(b.includes("hello")||b.includes("hi")||b.includes("hey"))return`ðŸ‘‹ Hello! I'm the demo assistant for this chat application. I can help you explore the features and capabilities of this platform.

Feel free to ask me about the app's functionality, technical details, or just have a casual conversation! What would you like to know? ðŸ˜Š`;let c=[`That's an interesting question! ðŸ¤” In a real deployment, this would be answered by advanced AI models like Claude or GPT-4. This demo shows how seamlessly the chat interface works with any AI backend.`,`Great point! ðŸ’¡ This mock assistant demonstrates the responsive chat interface. With a real API key, you'd get sophisticated AI responses from models like Anthropic's Claude, OpenAI's GPT-4, or other providers through OpenRouter.`,`I appreciate your message! ðŸ˜Š This demo showcases the chat app's clean interface and smooth user experience. The real version connects to powerful AI models for genuinely helpful conversations.`];return c[Math.floor(Math.random()*c.length)]}async getResponse(a){return await new Promise(a=>setTimeout(a,500+1e3*Math.random())),{response:this.getSmartMockResponse(a),model:"demo-assistant-v1",cost:.001}}getModelUsageStats(){return[{model:"mock",count:1,percentage:100}]}}},2708:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.d(b,{P:()=>l});var e=c(6981),f=c(8003),g=c(3143),h=c(1345),i=c(5786),j=c(8299),k=a([e,f,g,h,i,j]);[e,f,g,h,i,j]=k.then?(await k)():k;let l=(0,e.QB)({chat:f.U,conversations:g.Y,messages:h.w,usage:i.d,export:j.E});d()}catch(a){d(a)}})},2971:a=>{a.exports=import("zod")},3143:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.d(b,{Y:()=>i});var e=c(2971),f=c(6981),g=c(1333),h=a([e,f,g]);[e,f,g]=h.then?(await h)():h;let i=(0,f.QB)({list:f.JI.query(async({ctx:a})=>{try{return await a.db.conversation.findMany({orderBy:{updatedAt:"desc"},include:{messages:{orderBy:{createdAt:"desc"},take:1}}})}catch(a){throw console.error("Error fetching conversations:",a),new g.TRPCError({code:"INTERNAL_SERVER_ERROR",message:"Failed to fetch conversations",cause:a})}}),create:f.JI.mutation(async({ctx:a})=>{try{return await a.db.conversation.create({data:{title:null,model:"deepseek-chat",systemPrompt:"You are a helpful AI assistant.",temperature:.7,maxTokens:1e3}})}catch(a){throw console.error("Error creating conversation:",a),new g.TRPCError({code:"INTERNAL_SERVER_ERROR",message:"Failed to create conversation",cause:a})}}),updateTitle:f.JI.input(e.z.object({conversationId:e.z.string().min(1,"Conversation ID is required"),firstMessage:e.z.string().min(1,"First message is required")})).mutation(async({ctx:a,input:b})=>{try{let c=function(a){let b=a.trim().replace(/\n/g," ");return b.length<=50?b:b.substring(0,47)+"..."}(b.firstMessage);return await a.db.conversation.update({where:{id:b.conversationId},data:{title:c}})}catch(a){throw console.error("Error updating conversation title:",a),new g.TRPCError({code:"INTERNAL_SERVER_ERROR",message:"Failed to update conversation title",cause:a})}}),delete:f.JI.input(e.z.string().min(1,"Conversation ID is required")).mutation(async({ctx:a,input:b})=>{try{if(!await a.db.conversation.findUnique({where:{id:b}}))throw new g.TRPCError({code:"NOT_FOUND",message:"Conversation not found"});return await a.db.message.deleteMany({where:{conversationId:b}}),await a.db.conversation.delete({where:{id:b}}),{success:!0}}catch(a){if(a instanceof g.TRPCError)throw a;throw console.error("Error deleting conversation:",a),new g.TRPCError({code:"INTERNAL_SERVER_ERROR",message:"Failed to delete conversation",cause:a})}})});d()}catch(a){d(a)}})},3990:(a,b,c)=>{c.d(b,{vF:()=>e});class d{constructor(){switch(process.env.LOG_LEVEL?.toLowerCase()){case"debug":this.logLevel=3;break;case"info":this.logLevel=2;break;case"warn":this.logLevel=1;break;default:this.logLevel=0}}formatLog(a,b,c,d){let e={timestamp:new Date().toISOString(),level:a,message:b};return c&&Object.keys(c).length>0&&(e.meta=c),d&&(e.error={name:d.name,message:d.message,stack:void 0}),e}log(a,b,c,d,e){if(a>this.logLevel)return;let f=this.formatLog(b,c,d,e);0===a?console.error(JSON.stringify(f)):1===a?console.warn(JSON.stringify(f)):console.log(JSON.stringify(f))}error(a,b,c){this.log(0,"ERROR",a,c,b)}warn(a,b){this.log(1,"WARN",a,b)}info(a,b){this.log(2,"INFO",a,b)}debug(a,b){this.log(3,"DEBUG",a,b)}apiRequest(a,b,c,d,e){this.info("API Request",{method:a,path:b,duration:c,status:d,userId:e})}rateLimitHit(a,b,c){this.warn("Rate limit exceeded",{identifier:a.substring(0,20)+"...",endpoint:b,resetTime:new Date(c).toISOString()})}dbQuery(a,b,c){c?this.error("Database query failed",c,{query:a.substring(0,100)+"...",duration:b}):"true"===process.env.ENABLE_QUERY_LOGGING&&this.debug("Database query",{query:a.substring(0,100)+"...",duration:b})}assistantRequest(a,b,c,d,e){e?this.error("Assistant request failed",e,{model:a,tokens:b,cost:c,duration:d}):this.info("Assistant request",{model:a,tokens:b,cost:c,duration:d})}}let e=new d},4976:(a,b,c)=>{c.d(b,{z:()=>f});let d=require("@prisma/client");var e=c(3990);let f=global.prisma||new d.PrismaClient({log:[{emit:"event",level:"query"},{emit:"event",level:"error"},{emit:"event",level:"warn"}],errorFormat:"pretty",datasources:{db:{url:process.env.DATABASE_URL}}});f.$on("query",a=>{e.vF.dbQuery(a.query,a.duration)}),f.$on("error",a=>{e.vF.error("Database error",Error(a.message))}),f.$on("warn",a=>{e.vF.warn("Database warning",{message:a.message})}),process.on("beforeExit",async()=>{e.vF.info("Shutting down database connection"),await f.$disconnect()}),process.on("SIGTERM",async()=>{e.vF.info("SIGTERM received, closing database connection"),await f.$disconnect(),process.exit(0)}),process.on("SIGINT",async()=>{e.vF.info("SIGINT received, closing database connection"),await f.$disconnect(),process.exit(0)})},5175:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.r(b),c.d(b,{config:()=>j,default:()=>i});var e=c(9606),f=c(2708),g=c(6981),h=a([e,f,g]);[e,f,g]=h.then?(await h)():h;let i=(0,e.createNextApiHandler)({router:f.P,createContext:g.q6,onError:({error:a,req:b})=>{console.error("tRPC API Error:",{path:b.url,error:{message:a.message,code:a.code,cause:a.cause,stack:a.stack}}),"INTERNAL_SERVER_ERROR"===a.code&&console.error("Internal server error details:",{url:b.url,method:b.method,headers:b.headers,timestamp:new Date().toISOString()})},batching:{enabled:!0},responseMeta:({ctx:a,paths:b,type:c,errors:d})=>d.length>0&&d.some(a=>"INTERNAL_SERVER_ERROR"===a.code)?{status:500,headers:{"Cache-Control":"no-cache, no-store, must-revalidate"}}:"query"===c&&0===d.length?{headers:{"Cache-Control":"s-maxage=10, stale-while-revalidate=59"}}:{}}),j={api:{bodyParser:!1}};d()}catch(a){d(a)}})},5254:(a,b,c)=>{function d(a){let b=a.headers["x-session-id"]||a.headers["user-agent"]||"anonymous";return b?{id:`user_${Buffer.from(b).toString("base64").slice(0,16)}`,sessionId:b.toString()}:null}function e(a,b){return!0}c.d(b,{r:()=>d,w:()=>e})},5581:(a,b,c)=>{c.d(b,{_:()=>d});class d{static async exportToMarkdown(a,b={format:"markdown"}){let c="";for(let d of(b.includeMetadata&&(c+=`# Chat Export

**Export Date:** ${new Date().toISOString()}
**Total Conversations:** ${a.length}

`),a)){for(let a of(c+=`## ${d.title||"Untitled Conversation"}

`,b.includeMetadata&&(c+=`**Model:** ${d.model}
**Created:** ${d.createdAt.toISOString()}
**Messages:** ${d.metadata.totalMessages}
**Tokens:** ${d.metadata.totalTokens}
**Cost:** $${d.metadata.totalCost.toFixed(6)}

`),d.messages)){let d=b.includeTimestamps?` *(${a.createdAt.toISOString()})*`:"",e=b.includeCosts&&a.cost?` *[$${a.cost.toFixed(6)}]*`:"";c+=`### ${"user"===a.role?"\uD83D\uDC64 User":"\uD83E\uDD16 Assistant"}${d}${e}

${a.content}

`}c+="---\n\n"}return c}static async exportToObsidian(a,b={format:"obsidian"}){let c={},d=`# Chat Conversations

`;for(let e of(d+=`**Export Date:** ${new Date().toISOString()}

`,a)){let a=this.sanitizeFilename(e.title||`conversation-${e.id}`),f=`[[${a}]]`;d+=`- ${f} - ${e.model} (${e.metadata.totalMessages} messages)
`;let g=`# ${e.title||"Untitled Conversation"}

`;for(let a of(g+=`**Model:** ${e.model}
**Created:** ${e.createdAt.toISOString()}
**Messages:** ${e.metadata.totalMessages}
**Tokens:** ${e.metadata.totalTokens}
**Cost:** $${e.metadata.totalCost.toFixed(6)}

`,e.metadata.systemPrompt&&(g+=`## System Prompt

${e.metadata.systemPrompt}

`),g+=`## Messages

`,e.messages)){let c=b.includeTimestamps?` *(${a.createdAt.toISOString()})*`:"";g+=`### ${"user"===a.role?"\uD83D\uDC64 User":"\uD83E\uDD16 Assistant"}${c}

${a.content}

`}c[`${a}.md`]=g}return c["Chat Conversations.md"]=d,c}static async exportToNotion(a,b={format:"notion"}){let c=[];for(let b of a){let a={parent:{database_id:"YOUR_DATABASE_ID"},properties:{title:{title:[{text:{content:b.title||"Untitled Conversation"}}]},model:{select:{name:b.model}},created:{date:{start:b.createdAt.toISOString()}},messages:{number:b.metadata.totalMessages},tokens:{number:b.metadata.totalTokens},cost:{number:b.metadata.totalCost}},children:[{object:"block",type:"heading_2",heading_2:{rich_text:[{type:"text",text:{content:"Messages"}}]}}]};for(let c of b.messages)a.children.push({object:"block",type:"heading_3",heading_3:{rich_text:[{type:"text",text:{content:`${"user"===c.role?"\uD83D\uDC64 User":"\uD83E\uDD16 Assistant"}`}}]}}),a.children.push({object:"block",type:"paragraph",paragraph:{rich_text:[{type:"text",text:{content:c.content}}]}});c.push(a)}return c}static async exportToGoogleDocs(a,b={format:"google-docs"}){let c=`
      <!DOCTYPE html>
      <html>
      <head>
        <title>Chat Export</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 40px; }
          .conversation { margin-bottom: 40px; border-bottom: 2px solid #eee; padding-bottom: 20px; }
          .message { margin: 20px 0; padding: 15px; border-radius: 8px; }
          .user { background-color: #e3f2fd; }
          .assistant { background-color: #f3e5f5; }
          .metadata { background-color: #f5f5f5; padding: 10px; border-radius: 4px; margin-bottom: 20px; }
        </style>
      </head>
      <body>
        <h1>Chat Export</h1>
        <p><strong>Export Date:</strong> ${new Date().toISOString()}</p>
        <p><strong>Total Conversations:</strong> ${a.length}</p>
    `;for(let d of a){for(let a of(c+=`
        <div class="conversation">
          <h2>${d.title||"Untitled Conversation"}</h2>
          <div class="metadata">
            <p><strong>Model:</strong> ${d.model}</p>
            <p><strong>Created:</strong> ${d.createdAt.toISOString()}</p>
            <p><strong>Messages:</strong> ${d.metadata.totalMessages}</p>
            <p><strong>Tokens:</strong> ${d.metadata.totalTokens}</p>
            <p><strong>Cost:</strong> $${d.metadata.totalCost.toFixed(6)}</p>
          </div>
      `,d.messages)){let d=b.includeTimestamps?` <em>(${a.createdAt.toISOString()})</em>`:"";c+=`
          <div class="message ${a.role}">
            <h3>${"user"===a.role?"\uD83D\uDC64 User":"\uD83E\uDD16 Assistant"}${d}</h3>
            <p>${a.content}</p>
          </div>
        `}c+="</div>"}return c+"</body></html>"}static async exportToJSON(a,b={format:"json"}){return JSON.stringify({exportDate:new Date().toISOString(),version:"1.0",conversations:a.map(a=>({...a,createdAt:a.createdAt.toISOString(),updatedAt:a.updatedAt.toISOString(),messages:a.messages.map(a=>({...a,createdAt:a.createdAt.toISOString()}))}))},null,2)}static sanitizeFilename(a){return a.replace(/[^a-z0-9]/gi,"_").replace(/_+/g,"_").replace(/^_|_$/g,"").toLowerCase()}}},5600:a=>{a.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},5786:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.d(b,{d:()=>h});var e=c(6981),f=c(1333),g=a([e,f]);[e,f]=g.then?(await g)():g;let h=(0,e.QB)({getSessionStats:e.JI.query(async({ctx:a})=>{try{let[b,c]=await Promise.all([a.db.conversation.count(),a.db.message.count()]),d=(await a.db.message.findMany({select:{tokens:!0}})).reduce((a,b)=>a+(b.tokens||0),0);return{conversationCount:b,messageCount:c,totalTokens:d,totalCost:2e-6*d}}catch(a){throw console.error("Error fetching session stats:",a),new f.TRPCError({code:"INTERNAL_SERVER_ERROR",message:"Failed to fetch session statistics",cause:a})}}),getModelUsage:e.JI.query(async({ctx:a})=>{try{let b=await a.db.message.groupBy({by:["role"],_count:{role:!0}}),c=b.reduce((a,b)=>a+b._count.role,0);return{totalMessages:c,byRole:b.map(a=>({role:a.role,count:a._count.role,percentage:c>0?a._count.role/c*100:0}))}}catch(a){throw console.error("Error fetching model usage:",a),new f.TRPCError({code:"INTERNAL_SERVER_ERROR",message:"Failed to fetch model usage statistics",cause:a})}})});d()}catch(a){d(a)}})},6095:a=>{a.exports=import("superjson")},6981:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.d(b,{JI:()=>p,QB:()=>o,q6:()=>l});var e=c(1333),f=c(6095),g=c(4976),h=c(5254),i=c(8267),j=c(3990),k=a([e,f]);[e,f]=k.then?(await k)():k;let l=a=>{let b=(0,h.r)(a.req);return{req:a.req,res:a.res,db:g.z,user:b}},m=e.initTRPC.context().create({transformer:f.default,errorFormatter:({shape:a,error:b})=>({...a,data:{...a.data,message:b.message,code:b.code,cause:b.cause}})}),n=m.middleware(({ctx:a,next:b,path:c})=>{let d=a.req.headers["user-agent"]||"unknown",f=a.user?.sessionId||"anonymous",g=`${d}-${f}`,h="API";c?.includes("sendMessage")?h="CHAT":c?.includes("export")&&(h="EXPORT");let k=(0,i.Is)(h)(g);if(!k.allowed)throw j.vF.rateLimitHit(g,c||"unknown",k.resetTime),new e.TRPCError({code:"TOO_MANY_REQUESTS",message:`Rate limit exceeded. Try again in ${Math.ceil((k.resetTime-Date.now())/1e3)} seconds.`});return a.res&&(a.res.setHeader("X-RateLimit-Remaining",k.remaining.toString()),a.res.setHeader("X-RateLimit-Reset",new Date(k.resetTime).toISOString())),b()}),o=m.router,p=m.procedure.use(n);d()}catch(a){d(a)}})},8003:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.d(b,{U:()=>k});var e=c(2971),f=c(6981),g=c(1354),h=c(1333),i=c(5254),j=a([e,f,h]);[e,f,h]=j.then?(await j)():j;let k=(0,f.QB)({sendMessage:f.JI.input(e.z.object({content:e.z.string().min(1,"Message content cannot be empty").max(1e4,"Message content too long (max 10,000 characters)"),conversationId:e.z.string().min(1,"Conversation ID is required")})).mutation(async({ctx:a,input:b})=>{try{let{content:c,conversationId:d}=b;if(!a.user)throw new h.TRPCError({code:"UNAUTHORIZED",message:"Session required"});let e=await a.db.conversation.findUnique({where:{id:d}});if(!e)throw new h.TRPCError({code:"NOT_FOUND",message:"Conversation not found"});if(!(0,i.w)(e,a.user))throw new h.TRPCError({code:"FORBIDDEN",message:"Access denied"});let f=(0,g.B)({}),j=await f.getResponse(c),k="string"==typeof j?j:j.response,l="string"==typeof j?"unknown":j.model,m="string"==typeof j?0:j.cost;if(!k||""===k.trim())throw new h.TRPCError({code:"INTERNAL_SERVER_ERROR",message:"Assistant response is empty"});let n=await a.db.$transaction(async a=>{let b=await a.message.create({data:{conversationId:d,role:"user",content:c,tokens:Math.ceil(c.length/4)}}),e=await a.message.count({where:{conversationId:d,role:"user"}});if(1===e){let b=c.trim().replace(/\n/g," "),e=b.length<=50?b:b.substring(0,47)+"...";await a.conversation.update({where:{id:d},data:{title:e,updatedAt:new Date}})}else await a.conversation.update({where:{id:d},data:{updatedAt:new Date}});let f=await a.message.create({data:{conversationId:d,role:"assistant",content:k,tokens:Math.ceil(k.length/4)}});return{userMessage:b,assistantMessage:f}});return{id:n.assistantMessage.id,content:k,role:"assistant",timestamp:n.assistantMessage.createdAt,model:l,cost:m}}catch(a){if(a instanceof h.TRPCError)throw a;throw console.error("Error in sendMessage:",a),new h.TRPCError({code:"INTERNAL_SERVER_ERROR",message:"Failed to send message. Please try again.",cause:a})}})});d()}catch(a){d(a)}})},8267:(a,b,c)=>{c.d(b,{Is:()=>g});class d{constructor(){this.limits=new Map,this.cleanupInterval=setInterval(()=>{let a=Date.now();for(let[b,c]of this.limits.entries())a>c.resetTime&&this.limits.delete(b)},3e5)}check(a,b,c){let d=Date.now(),e=this.limits.get(a);if(!e||d>e.resetTime){let e=d+c;return this.limits.set(a,{count:1,resetTime:e}),{allowed:!0,remaining:b-1,resetTime:e}}return e.count>=b?{allowed:!1,remaining:0,resetTime:e.resetTime}:(e.count++,this.limits.set(a,e),{allowed:!0,remaining:b-e.count,resetTime:e.resetTime})}cleanup(){this.cleanupInterval&&clearInterval(this.cleanupInterval),this.limits.clear()}}let e=new d,f={CHAT:{maxRequests:30,windowMs:6e4},API:{maxRequests:100,windowMs:6e4},EXPORT:{maxRequests:5,windowMs:6e4}};function g(a){return b=>{let c=f[a];return e.check(b,c.maxRequests,c.windowMs)}}process.on("SIGTERM",()=>e.cleanup()),process.on("SIGINT",()=>e.cleanup())},8299:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.d(b,{E:()=>j});var e=c(2971),f=c(6981),g=c(1333),h=c(5581),i=a([e,f,g]);[e,f,g]=i.then?(await i)():i;let j=(0,f.QB)({exportAll:f.JI.input(e.z.object({format:e.z.enum(["markdown","notion","obsidian","google-docs","json","html"]),includeMetadata:e.z.boolean().default(!0),includeTimestamps:e.z.boolean().default(!0),includeCosts:e.z.boolean().default(!0),groupByConversation:e.z.boolean().default(!0)})).query(async({ctx:a,input:b})=>{try{let c,d=await a.db.conversation.findMany({include:{messages:{orderBy:{createdAt:"asc"}}},orderBy:{updatedAt:"desc"}}),e=d.map(a=>({id:a.id,title:a.title||"Untitled Conversation",model:a.model,createdAt:a.createdAt,updatedAt:a.updatedAt,messages:a.messages.map(a=>({id:a.id,role:a.role,content:a.content,tokens:a.tokens,cost:a.tokens?2e-6*a.tokens:0,createdAt:a.createdAt,parentId:a.parentId})),metadata:{totalMessages:a.messages.length,totalTokens:a.messages.reduce((a,b)=>a+(b.tokens||0),0),totalCost:a.messages.reduce((a,b)=>a+2e-6*(b.tokens||0),0),systemPrompt:a.systemPrompt,temperature:a.temperature,maxTokens:a.maxTokens}})),f={format:b.format,includeMetadata:b.includeMetadata,includeTimestamps:b.includeTimestamps,includeCosts:b.includeCosts,groupByConversation:b.groupByConversation};switch(b.format){case"markdown":c=await h._.exportToMarkdown(e,f);break;case"obsidian":c=await h._.exportToObsidian(e,f);break;case"notion":c=await h._.exportToNotion(e,f);break;case"google-docs":c=await h._.exportToGoogleDocs(e,f);break;case"json":c=await h._.exportToJSON(e,f);break;default:throw new g.TRPCError({code:"BAD_REQUEST",message:"Unsupported export format"})}return{format:b.format,data:c,metadata:{totalConversations:d.length,totalMessages:e.reduce((a,b)=>a+b.metadata.totalMessages,0),totalTokens:e.reduce((a,b)=>a+b.metadata.totalTokens,0),totalCost:e.reduce((a,b)=>a+b.metadata.totalCost,0),exportDate:new Date().toISOString()}}}catch(a){throw console.error("Export error:",a),new g.TRPCError({code:"INTERNAL_SERVER_ERROR",message:"Failed to export conversations",cause:a})}}),exportConversation:f.JI.input(e.z.object({conversationId:e.z.string().min(1,"Conversation ID is required"),format:e.z.enum(["markdown","notion","obsidian","google-docs","json","html"]),includeMetadata:e.z.boolean().default(!0),includeTimestamps:e.z.boolean().default(!0),includeCosts:e.z.boolean().default(!0)})).query(async({ctx:a,input:b})=>{try{let c,d=await a.db.conversation.findUnique({where:{id:b.conversationId},include:{messages:{orderBy:{createdAt:"asc"}}}});if(!d)throw new g.TRPCError({code:"NOT_FOUND",message:"Conversation not found"});let e={id:d.id,title:d.title||"Untitled Conversation",model:d.model,createdAt:d.createdAt,updatedAt:d.updatedAt,messages:d.messages.map(a=>({id:a.id,role:a.role,content:a.content,tokens:a.tokens,cost:a.tokens?2e-6*a.tokens:0,createdAt:a.createdAt,parentId:a.parentId})),metadata:{totalMessages:d.messages.length,totalTokens:d.messages.reduce((a,b)=>a+(b.tokens||0),0),totalCost:d.messages.reduce((a,b)=>a+2e-6*(b.tokens||0),0),systemPrompt:d.systemPrompt,temperature:d.temperature,maxTokens:d.maxTokens}},f={format:b.format,includeMetadata:b.includeMetadata,includeTimestamps:b.includeTimestamps,includeCosts:b.includeCosts};switch(b.format){case"markdown":c=await h._.exportToMarkdown([e],f);break;case"obsidian":c=await h._.exportToObsidian([e],f);break;case"notion":c=await h._.exportToNotion([e],f);break;case"google-docs":c=await h._.exportToGoogleDocs([e],f);break;case"json":c=await h._.exportToJSON([e],f);break;default:throw new g.TRPCError({code:"BAD_REQUEST",message:"Unsupported export format"})}return{format:b.format,data:c,metadata:{conversationId:d.id,title:d.title,totalMessages:e.metadata.totalMessages,totalTokens:e.metadata.totalTokens,totalCost:e.metadata.totalCost,exportDate:new Date().toISOString()}}}catch(a){if(a instanceof g.TRPCError)throw a;throw console.error("Export conversation error:",a),new g.TRPCError({code:"INTERNAL_SERVER_ERROR",message:"Failed to export conversation",cause:a})}}),getFormats:f.JI.query(()=>({formats:[{id:"markdown",name:"Markdown",description:"Plain text with Markdown formatting",extensions:[".md"]},{id:"obsidian",name:"Obsidian",description:"Markdown files optimized for Obsidian with linking",extensions:[".md"]},{id:"notion",name:"Notion",description:"JSON format for Notion API integration",extensions:[".json"]},{id:"google-docs",name:"Google Docs",description:"HTML format for Google Docs API",extensions:[".html"]},{id:"json",name:"JSON",description:"Structured JSON data",extensions:[".json"]}]}))});d()}catch(a){d(a)}})},9230:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.r(b),c.d(b,{config:()=>o,default:()=>n,handler:()=>m});var e=c(9046),f=c(8667),g=c(3480),h=c(6435),i=c(5175),j=c(8112),k=c(8766),l=a([i]);i=(l.then?(await l)():l)[0];let n=(0,h.M)(i,"default"),o=(0,h.M)(i,"config"),p=new g.PagesAPIRouteModule({definition:{kind:f.A.PAGES_API,page:"/api/trpc/[trpc]",pathname:"/api/trpc/[trpc]",bundlePath:"",filename:""},userland:i,distDir:".next",projectDir:""});async function m(a,b,c){let d=await p.prepare(a,b,{srcPage:"/api/trpc/[trpc]"});if(!d){b.statusCode=400,b.end("Bad Request"),null==c.waitUntil||c.waitUntil.call(c,Promise.resolve());return}let{query:f,params:g,prerenderManifest:h}=d;try{let c=a.method||"GET",d=(0,j.getTracer)(),e=d.getActiveScopeSpan(),i=p.instrumentationOnRequestError.bind(p),l=async e=>p.render(a,b,{query:{...f,...g},params:g,allowedRevalidateHeaderKeys:void 0,multiZoneDraftMode:!0,trustHostHeader:void 0,previewProps:h.preview,propagateError:!1,dev:p.isDev,page:"/api/trpc/[trpc]",projectDir:"",onError:(...b)=>i(a,...b)}).finally(()=>{if(!e)return;e.setAttributes({"http.status_code":b.statusCode,"next.rsc":!1});let f=d.getRootSpanAttributes();if(!f)return;if(f.get("next.span_type")!==k.BaseServerSpan.handleRequest)return void console.warn(`Unexpected root span type '${f.get("next.span_type")}'. Please report this Next.js issue https://github.com/vercel/next.js`);let g=f.get("next.route");if(g){let a=`${c} ${g}`;e.setAttributes({"next.route":g,"http.route":g,"next.span_name":a}),e.updateName(a)}else e.updateName(`${c} ${a.url}`)});e?await l(e):await d.withPropagatedContext(a.headers,()=>d.trace(k.BaseServerSpan.handleRequest,{spanName:`${c} ${a.url}`,kind:j.SpanKind.SERVER,attributes:{"http.method":c,"http.target":a.url}},l))}catch(a){if(p.isDev)throw a;(0,e.sendError)(b,500,"Internal Server Error")}finally{null==c.waitUntil||c.waitUntil.call(c,Promise.resolve())}}d()}catch(a){d(a)}})},9606:a=>{a.exports=import("@trpc/server/adapters/next")}};var b=require("../../../webpack-api-runtime.js");b.C(a);var c=b.X(0,[169],()=>b(b.s=9230));module.exports=c})();